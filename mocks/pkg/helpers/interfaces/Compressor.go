// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Compressor is an autogenerated mock type for the Compressor type
type Compressor struct {
	mock.Mock
}

// Compress provides a mock function with given fields: c, fileName, data
func (_m *Compressor) Compress(c context.Context, fileName string, data []byte) ([]byte, error) {
	ret := _m.Called(c, fileName, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) []byte); ok {
		r0 = rf(c, fileName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(c, fileName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Decompress provides a mock function with given fields: c, data
func (_m *Compressor) Decompress(c context.Context, data []byte) ([]byte, error) {
	ret := _m.Called(c, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(c, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(c, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
