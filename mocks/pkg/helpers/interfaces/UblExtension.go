// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UblExtension is an autogenerated mock type for the UblExtension type
type UblExtension struct {
	mock.Mock
}

// GetAdditionalInfo provides a mock function with given fields: data
func (_m *UblExtension) GetAdditionalInfo(data []byte) (*[]string, error) {
	ret := _m.Called(data)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func([]byte) *[]string); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hash provides a mock function with given fields: s
func (_m *UblExtension) Hash(s string) string {
	ret := _m.Called(s)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Parse provides a mock function with given fields: _a0
func (_m *UblExtension) Parse(_a0 []byte) (string, string, *map[string]string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func([]byte) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 *map[string]string
	if rf, ok := ret.Get(2).(func([]byte) *map[string]string); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*map[string]string)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func([]byte) error); ok {
		r3 = rf(_a0)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
